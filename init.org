#+author: Eric Crosson
#+email: esc@ericcrosson.com
#+todo: TODO(t) VERIFY(v) IN-PROGRESS(p) | OPTIONAL(o) HIATUS(h) DONE(d) DISCARDED(c) HACKED(k)
#+startup: content
* Introduction
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
    ;;; .emacs.el

    ;;; Commentary:
    ;;; This is the .emacs file written and used by esc. The .el file is
    ;;; not the original form of this document; it was written in org
    ;;; babel. If you are not viewing the org document, you should try to
    ;;; locate it. It's much nicer to humans.

    ;;; License:
    ;;; esc's .emacs configuration file, for a smoother Emacs experience.
    ;;; Copyright (C) 2013 Eric Crosson
    ;;;
    ;;; This program is free software: you can redistribute it and/or modify
    ;;; it under the terms of the GNU General Public License as published by
    ;;; the Free Software Foundation, either version 3 of the License, or
    ;;; (at your option) any later version.
    ;;;
    ;;; This program is distributed in the hope that it will be useful,
    ;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    ;;; GNU General Public License for more details.
    ;;;
    ;;; You should have received a copy of the GNU General Public License
    ;;; along with this program. If not, see <http://www.gnu.org/licenses/>.

    ;;; Code:
  #+END_SRC
  
* Time sensitive
  Now that the legal stuff is out of the way, let's get out the rat poison.
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
    ;; This code is important to run as early as possible, to avoid
    ;; initially rendering these bars only to remove them.

    (mapc (lambda (mode) (when (fboundp mode) (funcall mode -1)))
          '(menu-bar-mode
            tool-bar-mode
            scroll-bar-mode))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
    (setq gc-cons-threshold 100000000)
  #+END_SRC
  
** Bootstrap

   Configure remote package archives
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (require 'package)
  (setq package-enable-at-startup nil)
      (mapc (lambda (source) (add-to-list 'package-archives source) t)
            '(("gnu" . "http://elpa.gnu.org/packages/")
              ("marmalade" . "http://marmalade-repo.org/packages/")
              ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
              ("melpa" . "http://melpa.milkbox.net/packages/")
              ("org" . "http://orgmode.org/elpa/")))
  (package-initialize)
   #+END_SRC

   First there was =use-package=
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
   #+END_SRC

   
* Layout and load paths
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defcustom esc-meta-path "~/.emacs.d/meta"
    "Path to .emacs.d meta directory, for internal bookkeeping
  records."
    :type 'path
    :options '("~/.emacs.d/meta")
    :group 'esc-init)
  #+END_SRC
* UI
  Fire up the mood lighting

  #+BEGIN_SRC emacs-lisp :comments link :tangle no
  (use-package bliss-theme :ensure t
    ;; TODO: switch with color-theme stack
    :config (load-theme 'bliss t))

  ;; TODO: rehook on color change to bliss
  (mapcar (lambda (data) (set-face-attribute (car data) nil
                                        :underline  nil
                                        :foreground 'unspecified
                                        :background (cadr data)))
          '((highlight "#333")
            (region    "#444")))
  #+END_SRC

  These days I'm intrigued by =darkokai= theme

  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package darkokai-theme :ensure t
    :config
    (setq darkokai-mode-line-padding 1)
    (load-theme 'darkokai t))
  #+END_SRC

  We must always remember [[http://programmers.stackexchange.com/a/148678][our origins]].

  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
    (use-package fill-column-indicator :ensure t
      :config
      (add-hook 'prog-mode-hook 'fci-mode))
  #+END_SRC

  Mode line [[https://github.com/jordonbiondo/.emacs.d/blob/master/jordon/jordon-mode-line.el][minimization]].

  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defun esc-fancy-mode-line-render (left center right &optional lpad rpad)
    "Return a string the width of the current window with
  LEFT, CENTER, and RIGHT spaced out accordingly, LPAD and RPAD,
  can be used to add a number of spaces to the front and back of the string."
    (condition-case err
        (let* ((left
                (if lpad
                    (concat (make-string lpad ?\s) left)
                  left))
               (right
                (if rpad
                    (concat right (make-string rpad ?\s))
                  right))
               (width (apply '+ (window-width)
                             (let ((m (window-margins)))
                               (list (or (car m)
                                         0)
                                     (or (cdr m)
                                         0)))))
               (total-length (+ (length left)
                                (length center)
                                (length right) 2)))
          (when (> total-length width)
            (setq left "" right ""))
          (let* ((left-space (/ (- width (length center)) 2))
                 (right-space (- width left-space (length center)))
                 (lspaces (max (- left-space (length left)) 1))
                 (rspaces (max (- right-space (length right)) 1 0)))
            (concat left (make-string lspaces  ?\s) center
                    (make-string rspaces ?\s) right)))
      (error
       (format "[%s]: (%s) (%s) (%s)" err left center right))))

  (defvar esc-mode-line-format
    '((:eval (esc-fancy-mode-line-render
              (format-mode-line
               (format " %s (%%l/%d) " (downcase
                                        (format-mode-line
                                         mode-name))
                       (line-number-at-pos (point-max))))
              (concat
               (cond ((and
                       default-directory
                       (file-remote-p default-directory)) "@ ")
                     (t ""))
               (buffer-name)
               (cond ((not (buffer-file-name)) " ")
                     ((buffer-modified-p) "*")
                     (t " ")))
              (format-mode-line mode-line-process) 1 3))))

  (setq-default mode-line-format esc-mode-line-format)
  #+END_SRC
  
** Fonts
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defun font-exists-p (font)
    "Nil unless FONT is recognized by Emacs."
    (member esc-font (font-family-list)))
   #+END_SRC

   Favored font of late

   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (let ((esc-font "Meslo LG S 8"))
    (when (font-exists-p esc-font)
      (set-face-attribute 'default nil :font esc-font)))
   #+END_SRC
   
* Macros
  I took the macro below from [[http://milkbox.net/note/single-file-master-emacs-configuration/][milkypostman]]. His article is really worth
  a read; stop what you're doing and go take a look if you haven't.
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
(defmacro after (mode &rest body)
  "`eval-after-load' MODE evaluate BODY."
  (declare (indent defun))
  `(eval-after-load ,mode
     '(progn ,@body)))
  #+END_SRC
  
* User data
  Hello, My Name Is
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq user-full-name "Eric Crosson"
        user-mail-address "esc@ericcrosson.com")
  #+END_SRC
  
* Functions
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defun switch-to-previous-buffer ()
    "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently opened buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC
* Behavioral modifications
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (put 'overwrite-mode 'disabled t)       ;There shall be no 'insert'
  (fset 'yes-or-no-p 'y-or-n-p)           ;change yes-no to y-n
  (setq ;debug-on-error t
        inhibit-startup-screen t
        initial-scratch-message nil
        ring-bell-function 'ignore        ;turn off alarms completely
        disabled-command-function 'beep   ;alert me when accessing disabled funcs
        redisplay-dont-pause t            ;don't pause refreshes
        frame-title-format '("emacs@" system-name ":%f") ;include path of frame
        display-time-load-average-threshold 0.6
        dabbrev-case-replace nil
        display-buffer-reuse-frames t     ;raise buffers, not spawn
        remote-file-name-inhibit-cache t  ;don't resolve remote file attrubutes
        auto-save-default nil
        large-file-warning-threshold nil
        save-interprogram-paste-before-kill t
        set-mark-command-repeat-pop t
        starttls-use-gnutls t
        browse-url-browser-function 'browse-web
        kill-buffer-query-functions (remq 'process-kill-buffer-query-function
                                           kill-buffer-query-functions))
  #+END_SRC

  Now everybody agrees that the =*Minibuffer*= prompt is uneditable.
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq minibuffer-prompt-properties '(read-only t point-entered
                                                 minibuffer-avoid-prompt face
                                                 minibuffer-prompt))
  #+END_SRC

  Line numbers, when visible, should be loaded after a short delay and
  not loaded eagerly. They're candy, and who spends resources acquiring
  candy?
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq linum-delay t
        linum-eager nil)
  #+END_SRC

  These settings keep the text soup that is GNU/Linux as happy as
  GNU/Linux files can be.
  #+NAME: char-and-font-encoding
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; Char and font encoding
  (set-buffer-file-coding-system 'unix)
  (setq-default indent-tabs-mode nil)
  (setq c-default-style "linux"
        c-basic-offset 4
        tab-width 4
        require-final-newline 'visit-save ;compliance
        comment-style 'indent)
  #+END_SRC

  It is my belief that backup files should not be so obtrusive as to
  tempt users to disable them.

  #+NAME: stash-backups
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; Backup settings
  (push '("." . "~/.config/.emacs.d/") backup-directory-alist)
  #+END_SRC

  =i-search= is capable of spanning whitespace regions
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq search-whitespace-regexp "[ \t\r\n]+")
  #+END_SRC
  
* Aliases
  I did not grow up in an era where this is a straightforward mnemonic.
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defalias 'undefun 'fmakunbound)
  #+END_SRC
  
* TODOS
- auto-package-update config
- esc-mode
- persistent scratch

** Configuration
   ;; TODO: sort this incipient work into org home
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
     ;;; configure ivy
     (use-package ivy :ensure t
       :init
       (use-package avy :ensure t)
       (use-package counsel :ensure t)
       :diminish (ivy-mode . "")
       :bind
       (:map ivy-minibuffer-map
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line))
       :config
       (ivy-mode 1)
       ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
       (setq ivy-use-virtual-buffers t)
       ;; number of result lines to display
       (setq ivy-height 10)
       ;; does not count candidates
       (setq ivy-count-format "")
       ;; no regexp by default
       (setq ivy-initial-inputs-alist nil)
       ;; configure regexp engine.
       (setq ivy-re-builders-alist
             ;; allow input not in order
             '((t   . ivy--regex-ignore-order))))


     ;;; configure which-key
     (use-package which-key :ensure t
       :init
       (which-key-setup-side-window-right-bottom)
       :config
       (which-key-mode 1)
       (after 'diminish (diminish 'which-key-mode)))

     ;; features to add
     ;;; eldoc
     ;;; color theme
     ;;; quelpa?
     ;;; git-gutter
     ;;; goto last change
     ;;; multiple-cursors
     ;;; ace-jumps
     ;;; wind-move
     ;;; midnight
     ;;; unselectable-buffer
     ;;; dedicated-buffer
     ;;; ibuffer{-vc,}
     ;;; tea-time
     ;;; conf-mode
     ;;; bury-successful copmpilation buffer (see section Compilation config)
     ;;; latex config
     ;;; flyspell
     ;;; latex
     ;;; uniquify
     ;;; idle-highlight?
     ;;; skeletons... abbrev? yasnippet?
     ;;; spacemacs concept of frames and window numbering
     ;;; dictionary
     ;;; help-plus (custom package)
   #+END_SRC
   
*** Programming modes config
    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
      (use-package aggressive-indent :ensure t
        :config
        (global-aggressive-indent-mode 1))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
    #+END_SRC
*** Winner config
    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package winner
    :init
    (progn
      (winner-mode t)
      (setq esc/winner-boring-buffers '("*Completions*"
                                        "*Compile-Log*"
                                        "*inferior-lisp*"
                                        "*Fuzzy Completions*"
                                        "*Apropos*"
                                        "*Help*"
                                        "*cvs*"
                                        "*Buffer List*"
                                        "*Ibuffer*"
                                        "*esh command on file*"))
      (setq winner-boring-buffers
            (append winner-boring-buffers esc/winner-boring-buffers))
      (winner-mode t)))
    #+END_SRC
    
** Evil config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
     ;;; evil configuration
     (use-package evil :ensure t
       :init
       (setq evil-want-C-u-scroll t)
       :config
       (evil-mode 1))

     (use-package evil-visualstar
       :commands (evil-visualstar/begin-search-forward
                  evil-visualstar/begin-search-backward)
       :init
       (progn
         (define-key evil-visual-state-map (kbd "*")
           'evil-visualstar/begin-search-forward)
         (define-key evil-visual-state-map (kbd "#")
           'evil-visualstar/begin-search-backward)))

     (use-package evil-commentary :ensure t
       :config
       (evil-commentary-mode t))

     (use-package evil-leader :ensure t
       :init
       ;; TODO: autoload these defuns
       (defun revert-buffer-no-confirm ()
         "Revert buffer without prompting the user for anything."
         (interactive)
         (revert-buffer :noconfirm t))

       (defun xorg-dim ()
         "Run the command `xset dpms force off` to dim Xorg screens."
         (interactive)
         (call-process-shell-command "xset dpms force off"))

       (defun esc-insert-long-date ()
         "Insert date at point in YYYY-MM-DD format."
         (interactive)
         (insert (format-time-string "%A %B %d, %Y")))

       (defun esc-insert-short-date ()
         "Insert date at point in human-readable format, e.g. Tuesday
          October 18, 2016."
         (interactive)
         (insert (format-time-string "%Y-%m-%d")))

       :config
       (setq evil-leader/leader "<SPC>")
       (setq evil-leader/no-prefix-mode-rx '("dired-mode"
                                             "magit-.*-mode"))
       (evil-leader/set-key

         "y" 'execute-extended-command

         ;;; ace-jump commands
         "jl" 'ivy-avy
         "jf" 'avy-goto-char

         ;; comment
         ";" 'evil-commentary

         ;;; file commands
         "ff" 'counsel-find-file
         "fr" 'counsel-recentf
         ;; TODO: cull unnecessary entries from recentf list (machine files)

         ;;; buffer commands
         "bd" 'kill-this-buffer
         "bb" 'ivy-switch-buffer
         "C-i" 'switch-to-previous-buffer
         ;; TODO: implement function "bF" 'follow-mode-full-frame
         "br" 'revert-buffer-no-confirm

         ;;; movement commands
         "ss" 'swiper

         ;;; magit commands
         "gs" 'magit-status

         ;;; user commands
         "od" 'xorg-dim

         ;;; insertion commands
         "id" 'esc-insert-short-date
         "iD" 'esc-insert-long-date
         )
       (global-evil-leader-mode))

     (use-package evil-magit :ensure t
       :config
       (add-hook 'git-commit-mode-hook 'evil-insert-state))

     (use-package evil-escape :ensure t
       :config
       (setq-default evil-escape-key-sequence "fd")
       (after 'diminish (diminish 'evil-escape-mode))
       (evil-escape-mode 1))

     (use-package evil-surround :ensure t
       :config
       (global-evil-surround-mode 1))

     (use-package vi-tilde-fringe :ensure t
       :config
       (global-vi-tilde-fringe-mode))

     (use-package evil-args :ensure t
       :config
       ;; bind evil-args text objects
       (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
       (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

       ;; bind evil-forward/backward-args
       (define-key evil-normal-state-map "L" 'evil-forward-arg)
       (define-key evil-normal-state-map "H" 'evil-backward-arg)
       (define-key evil-motion-state-map "L" 'evil-forward-arg)
       (define-key evil-motion-state-map "H" 'evil-backward-arg)

       ;; bind evil-jump-out-args
       (define-key evil-normal-state-map "K" 'evil-jump-out-args)
       )
   #+END_SRC

   TODO: remove finished shell buffers
*** Compilation buffer config
    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (add-to-list 'same-window-buffer-names "*compilation*")
    #+END_SRC
    
** Org config

   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
     (setq org-src-fontify-natively t)
   #+END_SRC

   Org indent config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
     (add-hook 'org-mode-hook 'org-indent-mode)
     (add-hook 'org-mode-hook 'auto-fill-mode)
   #+END_SRC
   
** RestructuredText config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
     (use-package rst :ensure t
       :config (add-hook 'rst-mode-hook 'auto-fill-mode))
   #+END_SRC
** Dired config
   TODO: keymaps go in =esc-mode=
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
     (use-package dired-details :ensure t
       :config (dired-details-install)
       :init
       (use-package dash
         :ensure t
         :config
         ;; Reload dired after making changes
         (put '--each 'lisp-indent-function 1)
         (--each '(dired-do-rename
                   dired-create-directory
                   wdired-abort-changes)
           (eval `(defadvice ,it (after revert-buffer activate)
                    (revert-buffer)))))
       :config
       ;; TODO: define these functions
       ;; (use-package wdired
       ;;   :config
       ;;   (define-key wdired-mode-map
       ;;     (vector 'remap 'beginning-of-line) 'esc/dired-back-to-start-of-files)
       ;;   (define-key wdired-mode-map
       ;;     (vector 'remap 'esc/back-to-indentation-or-beginning)
       ;;     'esc/dired-back-to-start-of-files)
       ;;   (define-key wdired-mode-map
       ;;     (vector 'remap 'beginning-of-buffer) 'esc/dired-back-to-top)
       ;;   (define-key wdired-mode-map
       ;;     (vector 'remap 'end-of-buffer) 'esc/dired-jump-to-bottom))

       (setq diredp-hide-details-initially-flag t)
       (use-package dired-x
         :config
         (setq-default dired-omit-files-p t)
         (setq dired-omit-files
               (concat dired-omit-files "\\|\\.pyc$\\|\\.elc$\\|\\.~undo-tree~\\.gz$")))

       (after "dired-aux"
         (setq dired-free-space-args "-Ph")
         (setq dired-guess-shell-alist-user '(("\\.mp4$" "cvlc" "mplayer")
                                              ("\\.avi$" "cvlc" "mplayer")
                                              ("\\.mkv$" "cvlc" "mplayer")
                                              ("\\.pdf$" "evince" "zathura")
                                              ("\\.tar.bz2" "dtrx -n --one=here" "tar jxvf")
                                              ("\\.tar.gz" "dtrx -n --one=here" "tar xzvf")
                                              ("\\.rar" "dtrx -n --one=here" "unrar e")
                                              ("\\.zip" "dtrx -n --one=here")
                                              ("\\.*$" "xdg-open")))
         (add-to-list 'dired-compress-file-suffixes '("\\.zip$" "unzip")))
       (setq dired-listing-switches "-lhv")
       (setq dired-recursive-copies 'always)
       (setq dired-recursive-deletes 'always)
       (after "ibuf-ext"
         (add-to-list 'ibuffer-saved-filter-groups
                      '("default" ("dired" (mode . dired-mode)))))

       ;; TODO: move this somewhere it belongs
       ;; Allow running multiple async commands simultaneously
       (defadvice shell-command (after shell-in-new-buffer
                                  (command &optional output-buffer error-buffer))
         (when (get-buffer "*Async Shell Command*")
           (with-current-buffer "*Async Shell Command*" (rename-uniquely))))
       (ad-activate 'shell-command)

       (evil-leader/set-key
         "d" (defun dired-here ()
               (interactive)
               (let ((cwd (file-name-directory (or (buffer-file-name) ""))))
                 (cond
                  ((and cwd (file-exists-p cwd))
                   (dired cwd))
                  (t
                   (message "I'm not sure which dir to view."))))))

       (setq dired-dwim-target t)
       (after "dired"
         (add-hook 'dired-mode-hook 'auto-revert-mode)
         (defun dired-find-parent-directory ()
           (interactive)
           (find-alternate-file ".."))
         (define-key dired-mode-map (kbd "<right>") 'dired-find-file)
         (define-key dired-mode-map (vector 'remap 'evil-forward-char) 'dired-find-file)
         (define-key dired-mode-map (kbd "<left>") 'dired-find-parent-directory)
         (define-key dired-mode-map (vector 'remap 'evil-backward-char) 'dired-find-parent-directory)

         (define-key dired-mode-map (vector 'remap 'beginning-of-buffer)
           (defun dired-back-to-top ()
             (interactive)
             (beginning-of-buffer)
             (unless (search-forward ".." nil 'noerror)
               (beginning-of-buffer))
             (dired-next-line 1)))

         (define-key dired-mode-map (vector 'remap 'end-of-buffer)
           (defun dired-jump-to-bottom ()
             (interactive)
             (end-of-buffer)
             (dired-next-line -1))))
       )


   #+END_SRC
   
** Bitbake config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (add-to-list 'auto-mode-alist '("\\.bb\\'" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.bbappend\\'" . conf-mode))
#+END_SRC
** Diminish config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package diminish
    :config
    (after 'undo-tree-autoloads
      (global-undo-tree-mode t)
      (setq undo-tree-visualizer-timestamps t
            undo-tree-visualizer-relative-timestamps t))

    ;; less clutter on the mode line
    (diminish 'auto-revert-mode)
    (after 'test-mode (diminish 'test-mode))
    (diminish 'auto-fill-function)
    ;; (diminish 'visual-line-mode)
    ;; (diminish 'global-visual-line-mode)
    (after 'autopair  (diminish 'autopair-mode))
    (after 'abbrev    (diminish 'abbrev-mode))
    (after 'undo-tree (diminish 'undo-tree-mode))
    (after 'org-indent (diminish 'org-indent-mode))
    (after 'magit (diminish 'magit-auto-revert-mode))
    (after 'fic-mode (diminish 'fic-mode))
    (after 'eldoc (diminish 'eldoc-mode))
    (after 'smerge-mode (diminish 'smerge-mode))
    ;; (after 'auto-complete (diminish 'auto-complete-mode))
    (after 'esc-mode (diminish 'esc-mode)))
   #+END_SRC
   
** Minibuffer config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (add-hook 'eval-expression-minibuffer-setup-hook 'eldoc-mode)
   #+END_SRC
   
** Window manipulation
*** Zoom frame config
    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
      (use-package zoom-frm :ensure t
        ;; TODO: include core-micro-state.el from
        ;; https://github.com/syl20bnr/spacemacs/blob/master/core/core-micro-state.el

        ;; perhaps make the above into a standalone package
        ;; then bind zoom commands with a microstate
        )
    #+END_SRC
*** Windmove config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
     ;; Windmove from shift keys
     (use-package windmove
       :ensure t
       :config
       (windmove-default-keybindings)
       (after 'org
         (setq org-replace-disputed-keys t)
         (add-hook 'org-shiftup-final-hook 'windmove-up)
         (add-hook 'org-shiftleft-final-hook 'windmove-left)
         (add-hook 'org-shiftdown-final-hook 'windmove-down)
         (add-hook 'org-shiftright-final-hook 'windmove-right)))
   #+END_SRC
   
** Git gutter config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package git-gutter+ :ensure t
    :init
    :config
    (global-git-gutter+-mode)
    (evil-leader/set-key
      ;;; jump between hunks
      "gn" 'git-gutter+-next-hunk
      "gp" 'git-gutter+-previous-hunk
      ;;; act on hunks
      "gr" 'git-gutter+-revert-hunks
      ;; stage hunk at point, or all inside region
      "gt" 'git-gutter+-stage-hunks
      "gc" 'git-gutter+-commit
      "gC" 'git-gutter+-stage-and-commit
      "gy" 'git-gutter+-stage-and-commit-whole-buffer
      "gu" 'git-gutter+-unstage-whole-buffer
      ))
#+END_SRC
** Org cliplink config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package org-cliplink :ensure t
    :init (after 'esc-mode
            (esc-key "C-c C-M-l" 'org-cliplink)))
   #+END_SRC
   
** Rainbow delimeters mode config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC
   
** Lexbind config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package lexbind-mode
    :ensure t
    :init (add-hook 'emacs-lisp-mode-hook 'lexbind-mode))
   #+END_SRC
   
** Misc cmds config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package misc
    :commands zap-up-to-char
    :init ; seeing as I don't use these commands terribly often
    (after 'esc-mode
      (esc-key "M-z"     'zap-up-to-char) ; up-to, life saver
      (esc-key "M-Z"     'zap-to-char)))

  (use-package misc-cmds
    :commands revert-buffer-no-confirm
    :init ; takes a while to need the get-out-of-jail-free button
    (after 'esc-mode
      (esc-key "C-x M-r" 'revert-buffer-no-confirm)))
   #+END_SRC

   TODO : advice mc zap-up-to-char
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes

   #+END_SRC
   
** Expand region config
   [[http://spw.sdf.org/blog/tech/emacs/expandregionlines.html][Notes from the Library : /blog/tech/emacs/expandregionlines.html]]
   ;; TODO: fix esc-mode-map
   #+BEGIN_SRC emacs-lisp :comments link :tangle no
     (use-package expand-region
       :ensure t
       :bind ("C-;" . er/expand-region)
       :config
       (defadvice er/expand-region (around fill-out-region activate)
         (if (or (not (region-active-p))
                 (eq last-command 'er/expand-region))
             ad-do-it
           (if (< (point) (mark))
               (let ((beg (point)))
                 (goto-char (mark))
                 (end-of-line)
                 (forward-char 1)
                 (push-mark)
                 (goto-char beg)
                 (beginning-of-line))
             (let ((end (point)))
               (goto-char (mark))
               (beginning-of-line)
               (push-mark)
               (goto-char end)
               (end-of-line)
               (forward-char 1))))))
   #+END_SRC
   
** Magit config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package magit
    :ensure t
    :commands magit-status)
   #+END_SRC
   
** Git messenger config
   ;; TODO: fix esc-mode-map
   #+BEGIN_SRC emacs-lisp :comments link :tangle no
  (use-package git-messenger
    :ensure t
    :init (bind-key "C-c [" 'git-messenger:popup-message esc-mode-map))
   #+END_SRC
   
** Keyfreq mode config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package keyfreq
    :ensure t
    :config (keyfreq-autosave-mode 1)
            (setq keyfreq-file "~/.emacs.d/meta/keyfreq"))
   #+END_SRC
   
** Browse kill ring config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package browse-kill-ring
    :ensure t
    :config
    (setq kill-ring-max 80)
    (browse-kill-ring-default-keybindings))
   #+END_SRC
   
** Writegood mode config
   TODO: use-package that feller
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
   (use-package writegood-mode :ensure t
      :defer t)
   #+END_SRC
** Clipmon config
   TODO: conform to use-packages way of creating stubs
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package clipmon :ensure t
    :init (defvar clipmon--autoinsert " clipmon--autoinserted-this"))
   #+END_SRC
   
** Mouse avoidance config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (mouse-avoidance-mode 'exile)
   #+END_SRC
   
** Recentf config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq recentf-auto-cleanup 'never)
  (use-package recentf
    :ensure t
    :config (setq recentf-max-menu-items 200
                  recentf-max-saved-items 15
                  recentf-save-file (format "%s/recentf" esc-meta-path)
                  recentf-keep '(file-remote-p file-readable-p)))
   #+END_SRC
   
** Xorg yank config
   TODO: turn this into a minor mode for toggling with =esc-mode=
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq x-select-enable-clipboard t       ;global clipboard
        mouse-yank-at-point t)
   #+END_SRC
   
** Tea time config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
     (use-package tea-time :ensure t
       :defer t
       :commands tea-time
       :config
       (use-package notifications
         :commands notifications-notify)
       (defun esc/notify-tea-steeped ()
         (notifications-notify :title "Tea time"
                               :body "Rip out that sac, because your tea bag is done"
                               :app-name "Tea Time"
                               :sound-name "alarm-clock-elapsed"))
       (add-hook 'tea-time-notification-hook 'esc/notify-tea-steeped))
   #+END_SRC
** Saveplace config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package saveplace
    :ensure t
    :config
    (setq-default save-place t)
    (setq save-place-file (format "%s/places" esc-meta-path)))
   #+END_SRC
   
** Savehist config
   Keep a history of =M-x= across sessions.
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package savehist
    :ensure t
    :config
    (setq savehist-file (concat user-emacs-directory "meta/savehist"))
    (setq savehist-save-minibuffer-history 1)
    (setq savehist-additional-variables
          '(kill-ring
            search-ring
            regexp-search-ring))
    (savehist-mode 1))
   #+END_SRC
   
** Save desktop config
   #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defadvice desktop-save-in-desktop-dir (before ensure-desktop-dir-exists activate)
      "Ensure `desktop-dirname' exists before function
    `desktop-save-in-desktop-dir' attempts to save the desktop
    file."
      (mkdir desktop-dirname t))

  (setq desktop-path '("~/.emacs.d/meta/desktop/") ;local desktop files
        desktop-base-filename "default"
        desktop-load-locked-desktop t     ;never freeze after crash
        backup-by-copying-when-linked t
        backup-by-copying-when-mismatch t)
  (mkdir (car desktop-path) t)            ; ensure desktop-save dir exists
  (desktop-save-mode 1)                   ;use desktop file
   #+END_SRC
   
*** FIC-mode config
    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package fic-mode
    :ensure t
    :config
    ;; TODO: autoload to kick this beast out of memory
    (defun turn-on-fic-mode ()
       "Turn fic-mode on."
       (interactive)
       (fic-mode 1))
    (add-hook 'prog-mode-hook 'turn-on-fic-mode))
    #+END_SRC
    
*** undo-tree config
    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package undo-tree
    :ensure t
    :config
    (setq undo-limit (* 1024 1024))
    ;; todo: associate with esc-mode
    (undo-tree-mode 1)
    (setq undo-tree-auto-save-history t)
    (defadvice undo-tree-make-history-save-file-name
        (after undo-tree activate)
      "Make zipped `undo-tree' files obvious."
      (setq ad-return-value (concat ad-return-value ".gz")))

    ;;; Thanks to
    ;;; [[http://whattheemacsd.com/my-misc.el-02.html][Magnar]] for the
    ;;; advice.
    (defadvice undo-tree-undo (around keep-region activate)
      (if (use-region-p)
          (let ((m (set-marker (make-marker) (mark)))
                (p (set-marker (make-marker) (point))))
            ad-do-it
            (goto-char p)
            (set-mark m)
            (set-marker p nil)
            (set-marker m nil))
        ad-do-it)))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (server-start)
    #+END_SRC

    Have a great day~

    #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq Don t    ;allows `eval-buffer' on *scratch*
        Panic t  ;with `initial-scratch-message'
        initial-scratch-message
         (concat (propertize "Don't\nPanic\n"
                     'font-lock-face '(:height 10.0 :inherit variable-pitch))
                 "\n")) ;newline makes inserted text normal-sized
  (message "All done, %s%s" (user-login-name) ".")
  ;;; .emacs.el ends here
    #+END_SRC
    

* TODOs
  - make reindention a hook on save? I know there's aggressive indent but what about org mode?
